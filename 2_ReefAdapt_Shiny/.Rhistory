Range <- crop(Range, extent(desired_bioregion_poly))
Range <- mask(Range, desired_bioregion_poly)
plot(Range)
# # Get the extent of the buffered points
# extent_pts <- extent(pts)
# buffer_extent <- extent(pts) + 0.1
#
# # Crop the raster Range to the extent of the buffered points
# Range <- crop(Range, buffer_extent)
saveRDS(Range, file = paste("output/species_ranges_bioregions/", refid, ".rds", sep = ""))
# Convert raster to points data frame to calculate distance
points_df <- rasterToPoints(Range)
points_df <- as.data.frame(points_df[, -3])
points_df
sites <- data.frame(longitude = points_df$x, latitude = points_df$y)
calculate_pairwise_distances <- function(sites) {
n_sites <- nrow(sites)
sources <- mapply(Coor, sites$longitude, sites$latitude)
shortest_paths_matrix <- calc_fewest_edges_connectivity(network, sources)
return(shortest_paths_matrix)
}
# Call the function to calculate pairwise distances
pairwise_distances <- calculate_pairwise_distances(sites)
saveRDS(pairwise_distances, file = paste("output/connectivity_matrix/",refid, ".rds", sep = ""))
# Setup
# path to julia OCN project
ocn_path <- '/Users/georginawood/Documents/ocn/ocn/'
network_path <- '/Users/georginawood/Documents/ocn/ocn/output/full_network_sparsemat.jld2'
# set up julia and R interface, import necessary julia functions and data structs
library(JuliaConnectoR)
juliaEval('using Pkg')
juliaEval(paste0('Pkg.develop(PackageSpec(path = "', ocn_path, '"))'))
juliaEval('using Ocn')
Coor <- juliaFun('Coor')
load_network <- juliaFun('load_network')
calc_fewest_edges_connectivity <- juliaFun('calc_fewest_edges_connectivity')
# load network
network <- load_network(network_path)
refid_index <- 72
refid <- unique(latlon_spp_list[[refid_index]]$refid)
refid
species <- unique(latlon_spp_list[[refid_index]]$spp)
species_layer_index <- which(names(range_rasters) == species)
Range <- range_rasters[[species_layer_index]]
species_layer_name <- names(Range)
Range <- Range/Range # fix values to all 1 where this species is present.
studysites <- as.data.frame(latlon_spp_list[[refid_index]][7:8])
pts <- SpatialPointsDataFrame(coords = studysites, data = studysites,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
rel_bioregions <- unique(raster::extract(bioregions, pts))
# Subset the polygons based on the desired codes
desired_bioregion_poly <- Bioregions[Bioregions$ECO_CODE_X %in% rel_bioregions, ]
# Create a mask raster based on the extent of the buffered point
Range <- crop(Range, extent(desired_bioregion_poly))
Range <- mask(Range, desired_bioregion_poly)
plot(Range)
plot(Range)
# # Get the extent of the buffered points
# extent_pts <- extent(pts)
# buffer_extent <- extent(pts) + 0.1
#
# # Crop the raster Range to the extent of the buffered points
# Range <- crop(Range, buffer_extent)
saveRDS(Range, file = paste("output/species_ranges_bioregions/", refid, ".rds", sep = ""))
# Convert raster to points data frame to calculate distance
points_df <- rasterToPoints(Range)
points_df <- as.data.frame(points_df[, -3])
points_df
sites <- data.frame(longitude = points_df$x, latitude = points_df$y)
calculate_pairwise_distances <- function(sites) {
n_sites <- nrow(sites)
sources <- mapply(Coor, sites$longitude, sites$latitude)
shortest_paths_matrix <- calc_fewest_edges_connectivity(network, sources)
return(shortest_paths_matrix)
}
# Call the function to calculate pairwise distances
pairwise_distances <- calculate_pairwise_distances(sites)
saveRDS(pairwise_distances, file = paste("output/connectivity_matrix/",refid, ".rds", sep = ""))
setwd("~/Documents/Green gravel/data_analysis")
#installing/loading the package:
#install.packages("shiny")
library(shiny)
#install.packages("htmltools")
library(htmltools)
#install.packages("adegenet")
library(adegenet)
#install.packages("poppr")
library(poppr)
library(rrBLUP)
library(gplots)
#install.packages("devtools")
library("devtools")
# if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("SNPRelate")
library(SNPRelate)
# install.packages("dartR")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("qvalue")
library(qvalue)
library(dartR)
library(dartR.captive)
#install.packages("pegas")
library(pegas)
library(hierfstat) #load the library
# install.packages("readr")
library(readr)
#install.packages("magrittr")
library(magrittr)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("LEA")
library(LEA)
library(ggplotlyExtra)
library(plotly)
setwd("~/Documents/Green gravel/data_analysis")
gl8 <- readRDS("gl8.rds")
gl8$pop[105] <- "MA_RECRUITAQUARIUM"
# gl9 <- gl.filter.callrate(gl8, method = "loc", threshold = 0.99)
# saveRDS(gl9, "gl9.rds")
###############
pc <- gl.pcoa(gl8)
pc.interactive <- gl.pcoa.plot(pc, gl8)
blast <- dartR::gl.blast(gl8, ref_genome = "Sofie_alleles.fa", task = 3)
blast <- dartR::gl.blast(gl8, ref_genome = "Sofie_alleles.fa", task = 3)
blast <- dartR::gl.blast(gl8, ref_genome = "Sofie_alleles.fa", task = 3, )
blast <- dartR::gl.blast(gl8, ref_genome = "Sofie_alleles.fa", task = 3, )
blast <- dartR::gl.blast(gl8, ref_genome = "Sofie_alleles.fa", task = 3, )
blast <- dartR::gl.blast(gl8, ref_genome = "Sofie_alleles.fa", task = 3)
setwd("~/Documents/Reef_Adapt/2_ReefAdapt_Shiny")
# 1. Input environmental data ####
y2050_RCP_85_salinity <- raster("data/BioOracle_future_tiffs/2050_RCP85/2050AOGCM.RCP85.Benthic.Max.Depth.Salinity.Max.tif.BOv2_1.tif")
y2050_RCP_85_temp_max <- raster("data/BioOracle_future_tiffs/2050_RCP85/2050AOGCM.RCP85.Benthic.Min.Depth.Temperature.Max.tif.BOv2_1.tif")
y2050_RCP_85_temp_range <- raster("data/BioOracle_future_tiffs/2050_RCP85/2050AOGCM.RCP85.Benthic.Min.Depth.Temperature.Range.tif.BOv2_1.tif")
y2050_RCP_85_stack <- stack(y2050_RCP_85_temp_max,y2050_RCP_85_temp_range,y2050_RCP_85_salinity)
names(y2050_RCP_85_stack) <- c("BO2_tempmax_bdmin", "BO2_temprange_bdmin", "BO2_salinitymax_bdmax")
# 2. Input GDM model ####
rds_combo <- list.files(path = "output/gdmmodel/list_gdm_data/", pattern = "gdmmodel", full.names = FALSE)
rds_combo_fullnames <- list.files( path = "output/gdmmodel/list_gdm_data/", pattern = "gdmmodel", full.names = TRUE)
length(rds_combo)
for(i in 1:length(rds_combo)){}
rds_combo
i <- 8
modeli <- readRDS(rds_combo_fullnames[i])
refnames <- rds_combo
refidi <- gsub("gdmmodel_", "", refnames, fixed=TRUE)
refidi <- gsub(".rds", "", refidi, fixed=TRUE)
refidi <- refidi[i]
predData1 <- readRDS(file = paste("output/connectivity_matrix/predData/", refidi, ".rds", sep = ""))
range_cells <- predData1[,1:2]
pts <- SpatialPointsDataFrame(coords = range_cells, data = range_cells,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
predData <- predData1
predData$x <- predData$NMDS1
predData$y <- predData$NMDS2
trainingData <- readRDS(file = paste("output/connectivity_matrix/predData/trainingdata/", refidi, ".rds", sep = ""))
covariates <- names(trainingData)
covariates <- gsub(paste(refidi, ".", sep = ""), "", covariates)
covariates
predData <-  predData  %>%
select(all_of(covariates[-1])) # do not include the site column as it does not exist in preddata
environmenti <- predData
metadata       <- read.csv("data/metadata.csv", stringsAsFactors = TRUE) #import metadata
library(dplyr)
specific_study <- filter(metadata, refid == refidi)
genus_name <- specific_study$Genus
species_name <- specific_study$Species
species_title <- paste(genus_name,species_name,sep=" ") ## for plotting later
full_spp <- paste(genus_name,species_name,sep="")
marker <- specific_study$marker
reference <- specific_study$reference
region <- specific_study$region
neutral_adaptive <- specific_study$neutral.adaptive.overall.sex.linked
number_markers <- paste("based on", specific_study$n.markers, specific_study$marker, sep = " ")
# 2050 RCP 85:
y2050_RCP_85_stacki <-  predData # this is the current data
future_extracted_values <- data.frame(raster::extract(y2050_RCP_85_stack, pts)) # future data for 4 variables
y2050_RCP_85_stacki$BO2_salinitymax_bdmax <- future_extracted_values$BO2_salinitymax_bdmax
y2050_RCP_85_stacki$BO2_tempmax_bdmin <- future_extracted_values$BO2_tempmax_bdmin
y2050_RCP_85_stacki$BO2_temprange_bdmin <- future_extracted_values$BO2_temprange_bdmin
wd <- getwd() # get working directory
mainDir <- paste(wd, "/output/transformed_gdm_rasters", sep = "")
subDir <- full_spp
nextdir <- paste(mainDir, "/", subDir, sep = "")
MarkerDir <- marker
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE) # species directory
ifelse(!dir.exists(file.path(nextdir, MarkerDir)), dir.create(file.path(nextdir, MarkerDir)), FALSE) # marker directory
# Transform by GDM
predData <- na.omit(predData)
y2050_RCP_85_stacki <- na.omit(y2050_RCP_85_stacki)
transRasts_current <- gdm.transform(modeli, predData)
transRasts_2050_85 <- gdm.transform(modeli, y2050_RCP_85_stacki)
# turn the data inrto a raster:
test_raster <- readRDS(file = paste("output/species_ranges_bioregions/", refidi, ".rds", sep = ""))
rastDat <- as.data.frame(transRasts_current)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
predData1 <- na.omit(predData1)
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_current <- rasterFromXYZ(rastDat, crs= crs(test_raster))
rastDat <- as.data.frame(transRasts_2050_85)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_2050_85 <- rasterFromXYZ(rastDat, crs= crs(test_raster))
dir.create("output/transformed_gdm_rasters/")
dir.create(paste("output/transformed_gdm_rasters/", full_spp, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, "/", marker, sep = ""))
saveRDS(transRasts_current, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/", "current","_",refidi,".rds", sep = ""))
saveRDS(transRasts_2050_85, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/","2050_85","_",refidi, ".rds", sep = ""))
tryCatch({
modeli <- readRDS(rds_combo_fullnames[i])
refnames <- rds_combo
refidi <- gsub("gdmmodel_", "", refnames, fixed=TRUE)
refidi <- gsub(".rds", "", refidi, fixed=TRUE)
refidi <- refidi[i]
predData1 <- readRDS(file = paste("output/connectivity_matrix/predData/", refidi, ".rds", sep = ""))
range_cells <- predData1[,1:2]
pts <- SpatialPointsDataFrame(coords = range_cells, data = range_cells,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
predData <- predData1
predData$x <- predData$NMDS1
predData$y <- predData$NMDS2
trainingData <- readRDS(file = paste("output/connectivity_matrix/predData/trainingdata/", refidi, ".rds", sep = ""))
covariates <- names(trainingData)
covariates <- gsub(paste(refidi, ".", sep = ""), "", covariates)
covariates
#names(predData)
predData <-  predData  %>%
select(all_of(covariates[-1])) # do not include the site column as it does not exist in preddata
environmenti <- predData
metadata       <- read.csv("data/metadata.csv", stringsAsFactors = TRUE) #import metadata
library(dplyr)
specific_study <- filter(metadata, refid == refidi)
genus_name <- specific_study$Genus
species_name <- specific_study$Species
species_title <- paste(genus_name,species_name,sep=" ") ## for plotting later
full_spp <- paste(genus_name,species_name,sep="")
marker <- specific_study$marker
reference <- specific_study$reference
region <- specific_study$region
neutral_adaptive <- specific_study$neutral.adaptive.overall.sex.linked
number_markers <- paste("based on", specific_study$n.markers, specific_study$marker, sep = " ")
# 2050 RCP 85:
y2050_RCP_85_stacki <-  predData # this is the current data
future_extracted_values <- data.frame(raster::extract(y2050_RCP_85_stack, pts)) # future data for 4 variables
y2050_RCP_85_stacki$BO2_salinitymax_bdmax <- future_extracted_values$BO2_salinitymax_bdmax
y2050_RCP_85_stacki$BO2_tempmax_bdmin <- future_extracted_values$BO2_tempmax_bdmin
y2050_RCP_85_stacki$BO2_temprange_bdmin <- future_extracted_values$BO2_temprange_bdmin
# make a file structure for each species:
wd <- getwd() # get working directory
mainDir <- paste(wd, "/output/transformed_gdm_rasters", sep = "")
subDir <- full_spp
nextdir <- paste(mainDir, "/", subDir, sep = "")
MarkerDir <- marker
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE) # species directory
ifelse(!dir.exists(file.path(nextdir, MarkerDir)), dir.create(file.path(nextdir, MarkerDir)), FALSE) # marker directory
# Transform by GDM
predData <- na.omit(predData)
y2050_RCP_85_stacki <- na.omit(y2050_RCP_85_stacki)
transRasts_current <- gdm.transform(modeli, predData)
transRasts_2050_85 <- gdm.transform(modeli, y2050_RCP_85_stacki)
# turn the data inrto a raster:
test_raster <- readRDS(file = paste("output/species_ranges_bioregions/", refidi, ".rds", sep = ""))
rastDat <- as.data.frame(transRasts_current)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
predData1 <- na.omit(predData1)
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_current <- rasterFromXYZ(rastDat, crs= crs(test_raster))
rastDat <- as.data.frame(transRasts_2050_85)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_2050_85 <- rasterFromXYZ(rastDat, crs= crs(test_raster))
# save transformed rasters:
dir.create("output/transformed_gdm_rasters/")
dir.create(paste("output/transformed_gdm_rasters/", full_spp, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, "/", marker, sep = ""))
saveRDS(transRasts_current, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/", "current","_",refidi,".rds", sep = ""))
saveRDS(transRasts_2050_85, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/","2050_85","_",refidi, ".rds", sep = ""))
},
error = function(e){skip_to_next <- TRUE})
i <- 9
modeli <- readRDS(rds_combo_fullnames[i])
refnames <- rds_combo
refidi <- gsub("gdmmodel_", "", refnames, fixed=TRUE)
refidi <- gsub(".rds", "", refidi, fixed=TRUE)
refidi <- refidi[i]
predData1 <- readRDS(file = paste("output/connectivity_matrix/predData/", refidi, ".rds", sep = ""))
range_cells <- predData1[,1:2]
pts <- SpatialPointsDataFrame(coords = range_cells, data = range_cells,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
predData <- predData1
predData$x <- predData$NMDS1
predData$y <- predData$NMDS2
trainingData <- readRDS(file = paste("output/connectivity_matrix/predData/trainingdata/", refidi, ".rds", sep = ""))
covariates <- names(trainingData)
covariates <- gsub(paste(refidi, ".", sep = ""), "", covariates)
covariates
predData <-  predData  %>%
select(all_of(covariates[-1])) # do not include the site column as it does not exist in preddata
environmenti <- predData
metadata       <- read.csv("data/metadata.csv", stringsAsFactors = TRUE) #import metadata
library(dplyr)
specific_study <- filter(metadata, refid == refidi)
genus_name <- specific_study$Genus
species_name <- specific_study$Species
species_title <- paste(genus_name,species_name,sep=" ") ## for plotting later
full_spp <- paste(genus_name,species_name,sep="")
marker <- specific_study$marker
reference <- specific_study$reference
region <- specific_study$region
neutral_adaptive <- specific_study$neutral.adaptive.overall.sex.linked
number_markers <- paste("based on", specific_study$n.markers, specific_study$marker, sep = " ")
# 2050 RCP 85:
y2050_RCP_85_stacki <-  predData # this is the current data
future_extracted_values <- data.frame(raster::extract(y2050_RCP_85_stack, pts)) # future data for 4 variables
y2050_RCP_85_stacki$BO2_salinitymax_bdmax <- future_extracted_values$BO2_salinitymax_bdmax
y2050_RCP_85_stacki$BO2_tempmax_bdmin <- future_extracted_values$BO2_tempmax_bdmin
y2050_RCP_85_stacki$BO2_temprange_bdmin <- future_extracted_values$BO2_temprange_bdmin
wd <- getwd() # get working directory
mainDir <- paste(wd, "/output/transformed_gdm_rasters", sep = "")
subDir <- full_spp
nextdir <- paste(mainDir, "/", subDir, sep = "")
MarkerDir <- marker
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE) # species directory
ifelse(!dir.exists(file.path(nextdir, MarkerDir)), dir.create(file.path(nextdir, MarkerDir)), FALSE) # marker directory
# Transform by GDM
predData <- na.omit(predData)
y2050_RCP_85_stacki <- na.omit(y2050_RCP_85_stacki)
transRasts_current <- gdm.transform(modeli, predData)
transRasts_2050_85 <- gdm.transform(modeli, y2050_RCP_85_stacki)
# turn the data inrto a raster:
test_raster <- readRDS(file = paste("output/species_ranges_bioregions/", refidi, ".rds", sep = ""))
rastDat <- as.data.frame(transRasts_current)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
predData1 <- na.omit(predData1)
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_current <- rasterFromXYZ(rastDat, crs= crs(test_raster))
rastDat <- as.data.frame(transRasts_2050_85)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_2050_85 <- rasterFromXYZ(rastDat, crs= crs(test_raster))
dir.create("output/transformed_gdm_rasters/")
dir.create(paste("output/transformed_gdm_rasters/", full_spp, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, "/", marker, sep = ""))
saveRDS(transRasts_current, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/", "current","_",refidi,".rds", sep = ""))
saveRDS(transRasts_2050_85, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/","2050_85","_",refidi, ".rds", sep = ""))
tryCatch({
modeli <- readRDS(rds_combo_fullnames[i])
refnames <- rds_combo
refidi <- gsub("gdmmodel_", "", refnames, fixed=TRUE)
refidi <- gsub(".rds", "", refidi, fixed=TRUE)
refidi <- refidi[i]
predData1 <- readRDS(file = paste("output/connectivity_matrix/predData/", refidi, ".rds", sep = ""))
range_cells <- predData1[,1:2]
pts <- SpatialPointsDataFrame(coords = range_cells, data = range_cells,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
predData <- predData1
predData$x <- predData$NMDS1
predData$y <- predData$NMDS2
trainingData <- readRDS(file = paste("output/connectivity_matrix/predData/trainingdata/", refidi, ".rds", sep = ""))
covariates <- names(trainingData)
covariates <- gsub(paste(refidi, ".", sep = ""), "", covariates)
covariates
#names(predData)
predData <-  predData  %>%
select(all_of(covariates[-1])) # do not include the site column as it does not exist in preddata
environmenti <- predData
metadata       <- read.csv("data/metadata.csv", stringsAsFactors = TRUE) #import metadata
library(dplyr)
specific_study <- filter(metadata, refid == refidi)
genus_name <- specific_study$Genus
species_name <- specific_study$Species
species_title <- paste(genus_name,species_name,sep=" ") ## for plotting later
full_spp <- paste(genus_name,species_name,sep="")
marker <- specific_study$marker
reference <- specific_study$reference
region <- specific_study$region
neutral_adaptive <- specific_study$neutral.adaptive.overall.sex.linked
number_markers <- paste("based on", specific_study$n.markers, specific_study$marker, sep = " ")
# 2050 RCP 85:
y2050_RCP_85_stacki <-  predData # this is the current data
future_extracted_values <- data.frame(raster::extract(y2050_RCP_85_stack, pts)) # future data for 4 variables
y2050_RCP_85_stacki$BO2_salinitymax_bdmax <- future_extracted_values$BO2_salinitymax_bdmax
y2050_RCP_85_stacki$BO2_tempmax_bdmin <- future_extracted_values$BO2_tempmax_bdmin
y2050_RCP_85_stacki$BO2_temprange_bdmin <- future_extracted_values$BO2_temprange_bdmin
# make a file structure for each species:
wd <- getwd() # get working directory
mainDir <- paste(wd, "/output/transformed_gdm_rasters", sep = "")
subDir <- full_spp
nextdir <- paste(mainDir, "/", subDir, sep = "")
MarkerDir <- marker
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE) # species directory
ifelse(!dir.exists(file.path(nextdir, MarkerDir)), dir.create(file.path(nextdir, MarkerDir)), FALSE) # marker directory
# Transform by GDM
predData <- na.omit(predData)
y2050_RCP_85_stacki <- na.omit(y2050_RCP_85_stacki)
transRasts_current <- gdm.transform(modeli, predData)
transRasts_2050_85 <- gdm.transform(modeli, y2050_RCP_85_stacki)
# turn the data inrto a raster:
test_raster <- readRDS(file = paste("output/species_ranges_bioregions/", refidi, ".rds", sep = ""))
rastDat <- as.data.frame(transRasts_current)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
predData1 <- na.omit(predData1)
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_current <- rasterFromXYZ(rastDat, crs= crs(test_raster))
rastDat <- as.data.frame(transRasts_2050_85)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_2050_85 <- rasterFromXYZ(rastDat, crs= crs(test_raster))
# save transformed rasters:
dir.create("output/transformed_gdm_rasters/")
dir.create(paste("output/transformed_gdm_rasters/", full_spp, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, "/", marker, sep = ""))
saveRDS(transRasts_current, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/", "current","_",refidi,".rds", sep = ""))
saveRDS(transRasts_2050_85, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/","2050_85","_",refidi, ".rds", sep = ""))
},
error = function(e){skip_to_next <- TRUE})
if(skip_to_next){next}
i <- 10
modeli <- readRDS(rds_combo_fullnames[i])
refnames <- rds_combo
refidi <- gsub("gdmmodel_", "", refnames, fixed=TRUE)
refidi <- gsub(".rds", "", refidi, fixed=TRUE)
refidi <- refidi[i]
predData1 <- readRDS(file = paste("output/connectivity_matrix/predData/", refidi, ".rds", sep = ""))
range_cells <- predData1[,1:2]
pts <- SpatialPointsDataFrame(coords = range_cells, data = range_cells,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
predData <- predData1
predData$x <- predData$NMDS1
predData$y <- predData$NMDS2
trainingData <- readRDS(file = paste("output/connectivity_matrix/predData/trainingdata/", refidi, ".rds", sep = ""))
covariates <- names(trainingData)
covariates <- gsub(paste(refidi, ".", sep = ""), "", covariates)
covariates
predData <-  predData  %>%
select(all_of(covariates[-1])) # do not include the site column as it does not exist in preddata
environmenti <- predData
metadata       <- read.csv("data/metadata.csv", stringsAsFactors = TRUE) #import metadata
library(dplyr)
specific_study <- filter(metadata, refid == refidi)
genus_name <- specific_study$Genus
species_name <- specific_study$Species
species_title <- paste(genus_name,species_name,sep=" ") ## for plotting later
full_spp <- paste(genus_name,species_name,sep="")
marker <- specific_study$marker
reference <- specific_study$reference
region <- specific_study$region
neutral_adaptive <- specific_study$neutral.adaptive.overall.sex.linked
number_markers <- paste("based on", specific_study$n.markers, specific_study$marker, sep = " ")
# 2050 RCP 85:
y2050_RCP_85_stacki <-  predData # this is the current data
future_extracted_values <- data.frame(raster::extract(y2050_RCP_85_stack, pts)) # future data for 4 variables
y2050_RCP_85_stacki$BO2_salinitymax_bdmax <- future_extracted_values$BO2_salinitymax_bdmax
y2050_RCP_85_stacki$BO2_tempmax_bdmin <- future_extracted_values$BO2_tempmax_bdmin
y2050_RCP_85_stacki$BO2_temprange_bdmin <- future_extracted_values$BO2_temprange_bdmin
wd <- getwd() # get working directory
mainDir <- paste(wd, "/output/transformed_gdm_rasters", sep = "")
subDir <- full_spp
nextdir <- paste(mainDir, "/", subDir, sep = "")
MarkerDir <- marker
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE) # species directory
ifelse(!dir.exists(file.path(nextdir, MarkerDir)), dir.create(file.path(nextdir, MarkerDir)), FALSE) # marker directory
# Transform by GDM
predData <- na.omit(predData)
y2050_RCP_85_stacki <- na.omit(y2050_RCP_85_stacki)
transRasts_current <- gdm.transform(modeli, predData)
transRasts_2050_85 <- gdm.transform(modeli, y2050_RCP_85_stacki)
# turn the data inrto a raster:
test_raster <- readRDS(file = paste("output/species_ranges_bioregions/", refidi, ".rds", sep = ""))
rastDat <- as.data.frame(transRasts_current)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
predData1 <- na.omit(predData1)
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_current <- rasterFromXYZ(rastDat, crs= crs(test_raster))
rastDat <- as.data.frame(transRasts_2050_85)
rastDat$NMDS1 <- rastDat$x
rastDat$NMDS2 <- rastDat$y
rastDat$x <- predData1$x
rastDat$y <- predData1$y
transRasts_2050_85 <- rasterFromXYZ(rastDat, crs= crs(test_raster))
dir.create("output/transformed_gdm_rasters/")
dir.create(paste("output/transformed_gdm_rasters/", full_spp, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, sep = ""))
dir.create(paste("output/transformed_gdm_rasters/", full_spp, "/", region, "/", marker, sep = ""))
saveRDS(transRasts_current, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/", "current","_",refidi,".rds", sep = ""))
saveRDS(transRasts_2050_85, file = paste("output/transformed_gdm_rasters/", full_spp, "/", region,"/", marker, "/","2050_85","_",refidi, ".rds", sep = ""))
runApp()
